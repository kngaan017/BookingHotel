@model QuanLyDatPhongKhachSan.Models.booking

@{

    ViewBag.Title = "Edit";
    Layout = "~/Areas/Admin/Views/Shared/_MyLayout.cshtml";
}

@using (Html.BeginForm("Edit", "bookings", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

<div class="container col-lg-10">
    <h4><b>Chỉnh sửa đặt phòng</b></h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.bookingID)

    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("User ID", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.userID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.userID, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Room ID", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.roomID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.roomID, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Loại phòng", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.room.type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.room.type, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Status", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.status, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.status, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Ngày bắt đầu", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.startDate, new { htmlAttributes = new { @class = "form-control", id = "startDate" } })
                @Html.ValidationMessageFor(model => model.startDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Ngày kết thúc", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.endDate, new { htmlAttributes = new { @class = "form-control", id = "endDate" } })
                @Html.ValidationMessageFor(model => model.endDate, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Tổng số người", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.numberOfGuest, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.numberOfGuest, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Tổng tiền", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.total, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.total, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Tên khách", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.name, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Số điện thoại", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.phone, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Email", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Yêu cầu khác", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.requests, new { htmlAttributes = new { @class = "form-control", placeholder = "Không có" } })
                @Html.ValidationMessageFor(model => model.requests, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.LabelFor(model => model.meta, htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.meta, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.meta, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.LabelFor(model => model.order, htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @Html.EditorFor(model => model.order, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.order, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group">
        <div class="row">
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Gói buffet", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @{
                    bool surcharge = (Model.surcharge.GetValueOrDefault(false) ? true : false);
                }
                @Html.CheckBoxFor(model => surcharge)
            </div>
            <div class="col-md-2 text-right align-self-center">
                <strong>@Html.Label("Hiển thị", htmlAttributes: new { @class = "control-label" })</strong>
            </div>
            <div class="col-md-4">
                @{
                    bool hide = (Model.hide.GetValueOrDefault(false) ? true : false);
                }
                @Html.CheckBoxFor(model => hide)
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="row">
            <div class="col-md-12 text-right">
                <input type="submit" value="Save" class="btn btn-primary text-right" />
                @Html.ActionLink("Back to List", "Index")
            </div>
        </div>
    </div>
</div>
}

<script>
    $(document).ready(function () {
        // Gọi phương thức datepicker() sau khi tài liệu đã sẵn sàng
        $('#startDate').datepicker({
            dateFormat: 'mm/dd/yy', // Định dạng ngày tháng
            minDate: 0 // Không cho phép chọn ngày trước ngày hiện tại
        });

        $('#endDate').datepicker({
            dateFormat: 'mm/dd/yy', // Định dạng ngày tháng
            minDate: 0 // Không cho phép chọn ngày trước ngày hiện tại
        });
    });

</script>

@section _Footer
{
    <script src="~/Areas/Admin/Content/ckfinder/ckfinder.js"></script>
    <script src="~/Areas/Admin/Content/ckeditor/ckeditor.js"></script>
    <script type="text/javascript">
        var editor = CKEDITOR.replace("description");
        var editor = CKEDITOR.replace("description", { height: '800px' });
        customConfig: '/Areas/admin/Content/ckeditor/config.js';
    </script>
    <script>
        $(function () {
            $("#name").keyup(function () {
                var text = $.trim($(this).val().toLowerCase());
                var text_create;
                text_create = text.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a").replace(/\ /g, '-').replace(/đ/g, "d").replace(/đ/g, "d").replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y").replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u").replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ.+/g, "o").replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ.+/g, "e").replace(/ì|í|ị|ỉ|ĩ/g, "i");
                $('#meta').val(text_create);
            }).keyup();
        });
        document.addEventListener("DOMContentLoaded", function () {
            var input = document.getElementById("img");
            var label = document.getElementById("imgLabel");
            if (input.files && input.files.length > 0) {
                label.textContent = input.files[0].name;
            }
        });

        function displaySelectedImage(event) {
            var input = event.target;
            var label = document.getElementById("imgLabel");
            var imgPreview = document.getElementById("imgPreview");

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    imgPreview.src = e.target.result;
                    label.textContent = input.files[0].name;
                };

                reader.readAsDataURL(input.files[0]);
            } else {
                imgPreview.src = "";
                label.textContent = "No file chosen";
            }
        }
        function displaySelectedFileName() {
            var input = document.getElementById('img');
            var selectedFileName = document.getElementById('selectedFileName');

            if (input.files.length > 0) {
                selectedFileName.textContent = input.files[0].name;
            } else {
                selectedFileName.textContent = "";
            }
        }
    </script>
}
